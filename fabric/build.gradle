plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        data {
            client()

            name "Fabric Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${project.rootProject.file("fabric/src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=createbigcannons"
            vmArg "-Dporting_lib.datagen.existing_resources=${project.rootProject.file("common/src/main/resources")}"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

configurations.configureEach {
	resolutionStrategy {
		force("net.fabricmc:fabric-loader:${fabric_loader_version}")
	}
}

repositories {
    // mavens for Fabric-exclusives
    maven { url = "https://mvn.devos.one/#/" }
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
    maven { url = "https://mvn.devos.one/snapshots/" }
    // Create Fabric, Forge Tags, Milk Lib, Registrate Fabric
	maven { url = "https://mvn.devos.one/releases" } // Porting Lib Releases
	maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge config api port
    maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
	maven { // Ritchie's Projectile Library
		url = "https://maven.realrobotix.me/master/"
		content {
			includeGroup("com.rbasamoyai")
		}
	}
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${fabric_loader_version}")
    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive = false }

    // dependencies
    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")

    // Create - dependencies are added transitively
    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")

    // Development QOL
    modLocalRuntime("maven.modrinth:lazydfu:${lazydfu_version}")
    modImplementation("com.terraformersmc:modmenu:${modmenu_version}")

    // Recipe Viewers - Create Fabric supports JEI, REI, and EMI.
    // See root gradle.properties to choose which to use at runtime.
    switch (fabric_recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "jei": modLocalRuntime("mezz.jei:jei-${minecraft_version}-fabric:${jei_fabric_version}"); break
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"); break
        case "emi": modLocalRuntime("dev.emi:emi:${emi_version}"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: ${fabric_recipe_viewer}. Must be JEI, REI, EMI, or disabled.")
    }
    // if you would like to add integration with them, uncomment them here.
    //modCompileOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_fabric_version}")
    modCompileOnlyApi "curse.maven:jei-238222:${jei_fabric_file}"
    modCompileOnly("mezz.jei:jei-${minecraft_version}-common:${jei_fabric_version}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rei_version}")
//    modCompileOnly("dev.emi:emi:${emi_version}")

    modLocalRuntime("curse.maven:spark-361579:${spark_fabric_file}") // Spark

	annotationProcessor(implementation(include("io.github.llamalad7:mixinextras-fabric:${mixinextras_version}"))) // MixinExtras

	modImplementation(include("com.rbasamoyai:ritchiesprojectilelib:${rpl_version}+${minecraft_version}-fabric")) { transitive = false } // Ritchie's Projectile Library

	// Fixes, integration
	//modImplementation("curse.maven:free-cam-557076:${freecam_fabric_file}") // Freecam
	modImplementation("curse.maven:copycats-968398:${copycats_fabric_file}")
}

processResources {
    // set up properties for filling into metadata
    def properties = [
            version: version,
            fabric_loader_version: fabric_loader_version,
            fabric_api_version: fabric_api_version,
            minecraft_version: minecraft_version,
            create_version: create_fabric_version // on fabric, use the entire version, unlike forge
    ]
    inputs.properties properties

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

shadowJar {
	exclude "architectury.common.json"

	configurations = [project.configurations.shadowCommon]
	setArchiveClassifier "dev-shadow"
}

remapJar {
	injectAccessWidener = true
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	setArchiveClassifier null
}

jar {
    setArchiveClassifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

sourceSets.main {
    resources { // include generated resources in resources
        srcDir("src/generated/resources")
        exclude("src/generated/resources/.cache")
    }
}
