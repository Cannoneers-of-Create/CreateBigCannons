plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }

    runs {
        data {
            data()

            name "Forge Data Generation"
            vmArg '-Dforge.logging.markers=REGISTRIES'
            vmArg '-Dforge.logging.console.level=debug'
            programArgs "--all", "--mod", "createbigcannons"
            programArgs "--output", "${project.rootProject.file("forge/src/generated/resources")}"
            programArgs "--existing", "${project.rootProject.file("common/src/main/resources")}"
            programArgs "--existing-mod", "create"
            programArgs "--flat"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    // mavens for Forge-exclusives
    maven { url = "https://maven.theillusivec4.top/" } // Curios
    maven { // Create Forge and Registrate Forge
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
    }
	maven { // Ritchie's Projectile Library
		url = "https://maven.realrobotix.me/master/"
		content {
			includeGroup("com.rbasamoyai")
		}
	}
	flatDir {
		dir "./libs"
	}
    mavenCentral()
}

dependencies {
    forge("net.minecraftforge:forge:${minecraft_version}-${forge_version}")
    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Create and its dependencies
    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_forge_version}:slim") { transitive = false }
    modImplementation("com.tterrag.registrate:Registrate:${registrate_forge_version}")
    modImplementation("com.jozufozu.flywheel:flywheel-forge-${flywheel_forge_minecraft_version}:${flywheel_forge_version}")

    // Development QOL
    modLocalRuntime("mezz.jei:jei-${minecraft_version}:${jei_forge_version}")

    // if you would like to add integration with JEI, uncomment this line.
    modCompileOnly("mezz.jei:jei-${minecraft_version}:${jei_forge_version}:api")

    modImplementation("curse.maven:spark-361579:${spark_forge_file}") // Spark

	// Ritchie's Projectile Library
	String rplSuffix = Boolean.valueOf(use_local_rpl_build) ? "" : "-build.${rpl_build}";
	modImplementation(include("com.rbasamoyai:ritchiesprojectilelib:${rpl_version}+mc.${minecraft_version}-forge" + rplSuffix)) { transitive = false }

	compileOnly("io.github.llamalad7:mixinextras-common:${mixinextras_version}")
	annotationProcessor(implementation(include("io.github.llamalad7:mixinextras-forge:${mixinextras_version}")))

	// Fixes, integration
	//modImplementation("curse.maven:free-cam-557076:${freecam_forge_file}") // Freecam
	modImplementation("curse.maven:copycats-968398:${copycats_forge_file}")
	modImplementation("curse.maven:framedblocks-441647:${framedblocks_forge_file}")

	// Curios
	modRuntimeOnly("top.theillusivec4.curios:curios-forge:${curios_forge_version}")
	modCompileOnly("top.theillusivec4.curios:curios-forge:${curios_forge_version}:api")
	modImplementation("curse.maven:cc-tweaked-282001:${cc_tweaked_file}")
}

processResources {
    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
            "version", version,
            "forge_version", forge_version.split("\\.")[0], // only specify major version of forge
            "minecraft_version", minecraft_version,
            "create_version", create_forge_version.split("-")[0] // cut off build number
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

loom {
    forge {
        mixinConfig(
                "createbigcannons-common.mixins.json",
                "createbigcannons.mixins.json"
        )
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    setArchiveClassifier "dev-shadow"
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
    setArchiveClassifier null
}

jar {
    setArchiveClassifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

sourceSets.main {
    resources { // include generated resources in resources
        srcDir("src/generated/resources")
        exclude("src/generated/resources/.cache")
    }
}

